# -*- coding: utf-8 -*-
"""Developing_UnSupervised_ML_Models.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GOrs86Kye6zGOpRGE87Fa84DlVE0ODfx

##**Task - 1: Data preparation**
"""

import pandas as pd

# Define a function to parse the log file
def parse_log_file(file_path):
    data = []
    with open(file_path, 'r') as f:
        for line in f:
            # Assuming the log file has the following format:
            # (timestamp) can0 XXX#YYYYYYYYYYYYYYYY
            parts = line.strip().split()
            timestamp = float(parts[0][1:-1])  # Remove parentheses and convert to float
            can_id = parts[1]
            data_hex = parts[2].split('#')[1]
            data.append([timestamp, can_id, data_hex])
    return pd.DataFrame(data, columns=['Time', 'ID', 'Data'])

# Parse the log files
df_injection_FF_as_Speed = parse_log_file('/content/CAN Bus log - injection of FFF as the speed reading.log')
df_injection_RPM = parse_log_file('/content/CAN Bus log - injection of RPM readings.log')
df_no_injection = parse_log_file('/content/CAN bus log - no injection of messages.log')

# Define a function to extract RPM and Speed from the Data column
def extract_rpm_speed(data_hex):
    # Assuming the RPM value is in the 5th and 6th characters of the Data column
    rpm = int(data_hex[4:6], 16)
    # Assuming the Speed value is in the 7th and 8th characters of the Data column
    speed = int(data_hex[6:8], 16)
    return pd.Series([rpm, speed], index=['RPM', 'Speed'])

# Extract RPM and Speed columns
df_injection_FF_as_Speed[['RPM', 'Speed']] = df_injection_FF_as_Speed['Data'].apply(extract_rpm_speed)
df_injection_RPM[['RPM', 'Speed']] = df_injection_RPM['Data'].apply(extract_rpm_speed)
df_no_injection[['RPM', 'Speed']] = df_no_injection['Data'].apply(extract_rpm_speed)

# Drop the Data column
df_injection_FF_as_Speed.drop('Data', axis=1, inplace=True)
df_injection_RPM.drop('Data', axis=1, inplace=True)
df_no_injection.drop('Data', axis=1, inplace=True)

# Drop the Attack column
if 'Attack' in df_injection_FF_as_Speed.columns:
    df_injection_FF_as_Speed.drop('Attack', axis=1, inplace=True)
if 'Attack' in df_injection_RPM.columns:
    df_injection_RPM.drop('Attack', axis=1, inplace=True)
if 'Attack' in df_no_injection.columns:
    df_no_injection.drop('Attack', axis=1, inplace=True)

# Print the data frames
print("Data frame for Injection of FF as Speed:")
print(df_injection_FF_as_Speed.head())

print("\nData frame for Injection of RPM:")
print(df_injection_RPM.head())

print("\nData frame for No injection:")
print(df_no_injection.head())

"""##**Task - 2:** **K- means Clustering**"""

import warnings
warnings.filterwarnings("ignore", category=FutureWarning)

from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

# Define a function to perform K-means clustering
def perform_kmeans(df, k):
    kmeans = KMeans(n_clusters=k, n_init=10)  # Set n_init explicitly
    kmeans.fit(df[['RPM', 'Speed']])
    centroids = kmeans.cluster_centers_
    labels = kmeans.labels_
    accuracy = kmeans.score(df[['RPM', 'Speed']])
    return centroids, labels, accuracy

# Perform K-means clustering on the datasets
centroids_FF_as_Speed, labels_FF_as_Speed, accuracy_FF_as_Speed = perform_kmeans(df_injection_FF_as_Speed, 2)
centroids_RPM, labels_RPM, accuracy_RPM = perform_kmeans(df_injection_RPM, 2)
centroids_no_injection, labels_no_injection, accuracy_no_injection = perform_kmeans(df_no_injection, 2)

# Plot the clusters
plt.figure(figsize=(10, 6))

plt.subplot(2, 3, 1)
plt.scatter(df_injection_FF_as_Speed['RPM'], df_injection_FF_as_Speed['Speed'], c=labels_FF_as_Speed)
plt.scatter(centroids_FF_as_Speed[:, 0], centroids_FF_as_Speed[:, 1], marker='*', c='red', s=200)
plt.title('Injection of FF as Speed (RPM)')
plt.xlabel('RPM')
plt.ylabel('Speed')

plt.subplot(2, 3, 2)
plt.scatter(df_injection_FF_as_Speed['Speed'], df_injection_FF_as_Speed['RPM'], c=labels_FF_as_Speed)
plt.scatter(centroids_FF_as_Speed[:, 1], centroids_FF_as_Speed[:, 0], marker='*', c='red', s=200)
plt.title('Injection of FF as Speed (Speed)')
plt.xlabel('Speed')
plt.ylabel('RPM')

plt.subplot(2, 3, 3)
plt.scatter(df_injection_RPM['RPM'], df_injection_RPM['Speed'], c=labels_RPM)
plt.scatter(centroids_RPM[:, 0], centroids_RPM[:, 1], marker='*', c='red', s=200)
plt.title('Injection of RPM (RPM)')
plt.xlabel('RPM')
plt.ylabel('Speed')

plt.subplot(2, 3, 4)
plt.scatter(df_injection_RPM['Speed'], df_injection_RPM['RPM'], c=labels_RPM)
plt.scatter(centroids_RPM[:, 1], centroids_RPM[:, 0], marker='*', c='red', s=200)
plt.title('Injection of RPM (Speed)')
plt.xlabel('Speed')
plt.ylabel('RPM')

plt.subplot(2, 3, 5)
plt.scatter(df_no_injection['RPM'], df_no_injection['Speed'], c=labels_no_injection)
plt.scatter(centroids_no_injection[:, 0], centroids_no_injection[:, 1], marker='*', c='red', s=200)
plt.title('No Injection (RPM)')
plt.xlabel('RPM')
plt.ylabel('Speed')

plt.subplot(2, 3, 6)
plt.scatter(df_no_injection['Speed'], df_no_injection['RPM'], c=labels_no_injection)
plt.scatter(centroids_no_injection[:, 1], centroids_no_injection[:, 0], marker='*', c='red', s=200)
plt.title('No Injection (Speed)')
plt.xlabel('Speed')
plt.ylabel('RPM')

plt.tight_layout()
plt.show()

print("Centroids for Injection of FF as Speed:", centroids_FF_as_Speed)
print("Accuracy for Injection of FF as Speed:", accuracy_FF_as_Speed)

print("\nCentroids for Injection of RPM:", centroids_RPM)
print("Accuracy for Injection of RPM:", accuracy_RPM)

print("\nCentroids for No Injection:", centroids_no_injection)
print("Accuracy for No Injection:", accuracy_no_injection)

"""##**Task - 3: Isolation Forest Algorithm**"""

import warnings
warnings.filterwarnings("ignore")

import pandas as pd
from sklearn.ensemble import IsolationForest
import matplotlib.pyplot as plt

# Define a function to perform Isolation Forest
def perform_isolation_forest(df):
    iforest = IsolationForest(contamination=0.1)
    iforest.fit(df[['RPM', 'Speed']])
    predictions = iforest.predict(df[['RPM', 'Speed']])
    anomalies = df[predictions == -1]
    anomaly_rate = len(anomalies) / len(df)
    accuracy = abs(anomaly_rate - 0.1)  # estimate accuracy based on contamination rate
    return anomalies, accuracy

# Perform Isolation Forest on the datasets
anomalies_FF_as_Speed_RPM, accuracy_FF_as_Speed_RPM = perform_isolation_forest(df_injection_FF_as_Speed)
anomalies_FF_as_Speed_Speed, accuracy_FF_as_Speed_Speed = perform_isolation_forest(df_injection_FF_as_Speed)

anomalies_RPM_RPM, accuracy_RPM_RPM = perform_isolation_forest(df_injection_RPM)
anomalies_RPM_Speed, accuracy_RPM_Speed = perform_isolation_forest(df_injection_RPM)

anomalies_no_injection_RPM, accuracy_no_injection_RPM = perform_isolation_forest(df_no_injection)
anomalies_no_injection_Speed, accuracy_no_injection_Speed = perform_isolation_forest(df_no_injection)

# Plot the clusters
plt.figure(figsize=(12, 8))

plt.subplot(2, 3, 1)
plt.scatter(df_injection_FF_as_Speed['RPM'], df_injection_FF_as_Speed['Speed'], c='blue')
plt.scatter(anomalies_FF_as_Speed_RPM['RPM'], anomalies_FF_as_Speed_RPM['Speed'], c='red')
plt.title('Injection of FF as Speed (RPM)')
plt.xlabel('RPM')
plt.ylabel('Speed')

plt.subplot(2, 3, 2)
plt.scatter(df_injection_FF_as_Speed['Speed'], df_injection_FF_as_Speed['RPM'], c='blue')
plt.scatter(anomalies_FF_as_Speed_Speed['Speed'], anomalies_FF_as_Speed_Speed['RPM'], c='red')
plt.title('Injection of FF as Speed (Speed)')
plt.xlabel('Speed')
plt.ylabel('RPM')

plt.subplot(2, 3, 3)
plt.scatter(df_injection_RPM['RPM'], df_injection_RPM['Speed'], c='blue')
plt.scatter(anomalies_RPM_RPM['RPM'], anomalies_RPM_RPM['Speed'], c='red')
plt.title('Injection of RPM (RPM)')
plt.xlabel('RPM')
plt.ylabel('Speed')

plt.subplot(2, 3, 4)
plt.scatter(df_injection_RPM['Speed'], df_injection_RPM['RPM'], c='blue')
plt.scatter(anomalies_RPM_Speed['Speed'], anomalies_RPM_Speed['RPM'], c='red')
plt.title('Injection of RPM (Speed)')
plt.xlabel('Speed')
plt.ylabel('RPM')

plt.subplot(2, 3, 5)
plt.scatter(df_no_injection['RPM'], df_no_injection['Speed'], c='blue')
plt.scatter(anomalies_no_injection_RPM['RPM'], anomalies_no_injection_RPM['Speed'], c='red')
plt.title('No Injection (RPM)')
plt.xlabel('RPM')
plt.ylabel('Speed')

plt.subplot(2, 3, 6)
plt.scatter(df_no_injection['Speed'], df_no_injection['RPM'], c='blue')
plt.scatter(anomalies_no_injection_Speed['Speed'], anomalies_no_injection_Speed['RPM'], c='red')
plt.title('No Injection (Speed)')
plt.xlabel('Speed')
plt.ylabel('RPM')

plt.tight_layout()
plt.show()

print("Anomalies for Injection of FF as Speed (RPM):", anomalies_FF_as_Speed_RPM)
print("Accuracy:", accuracy_FF_as_Speed_RPM)

print("\nAnomalies for Injection of FF as Speed (Speed):", anomalies_FF_as_Speed_Speed)
print("Accuracy:", accuracy_FF_as_Speed_Speed)

print("\nAnomalies for Injection of RPM (RPM):", anomalies_RPM_RPM)
print("Accuracy:", accuracy_RPM_RPM)

print("\nAnomalies for Injection of RPM (Speed):", anomalies_RPM_Speed)
print("Accuracy:", accuracy_RPM_Speed)

print("\nAnomalies for No Injection (RPM):", anomalies_no_injection_RPM)
print("Accuracy:", accuracy_no_injection_RPM)

print("\nAnomalies for No Injection (Speed):", anomalies_no_injection_Speed)
print("Accuracy:", accuracy_no_injection_Speed)

"""##**Task - 4: Hidden Markov Models:**"""

#!pip install hmmlearn

import pandas as pd
import warnings
import numpy as np
from hmmlearn import hmm
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder

warnings.filterwarnings("ignore")

# Define a function to parse the log file
def parse_log_file(file_path):
    data = []
    with open(file_path, 'r') as f:
        for line in f:
            parts = line.strip().split()
            timestamp = float(parts[0][1:-1])  # Remove parentheses and convert to float
            can_id = parts[1]
            data_hex = parts[2].split('#')[1]
            data.append([timestamp, can_id, data_hex])
    return pd.DataFrame(data, columns=['Time', 'ID', 'Data'])

# Parse the log files
df_injection_FF_as_Speed = parse_log_file('CAN Bus log - injection of FFF as the speed reading.log')
df_injection_RPM = parse_log_file('CAN Bus log - injection of RPM readings.log')
df_no_injection = parse_log_file('CAN bus log - no injection of messages.log')

# Define a function to extract RPM and Speed from the Data column
def extract_rpm_speed(data_hex):
    rpm = int(data_hex[4:6], 16)
    speed = int(data_hex[6:8], 16)
    return pd.Series([rpm, speed], index=['RPM', 'Speed'])

# Extract RPM and Speed columns
df_injection_FF_as_Speed[['RPM', 'Speed']] = df_injection_FF_as_Speed['Data'].apply(extract_rpm_speed)
df_injection_RPM[['RPM', 'Speed']] = df_injection_RPM['Data'].apply(extract_rpm_speed)
df_no_injection[['RPM', 'Speed']] = df_no_injection['Data'].apply(extract_rpm_speed)

# Drop the Data column
df_injection_FF_as_Speed.drop('Data', axis=1, inplace=True)
df_injection_RPM.drop('Data', axis=1, inplace=True)
df_no_injection.drop('Data', axis=1, inplace=True)

# Define a function to perform HMM and predict attack vs no attack
def perform_hmm(df, n_components=2):
    model = hmm.GaussianHMM(n_components=n_components, covariance_type="diag", n_iter=1000)
    model.fit(df[['RPM', 'Speed']])
    hidden_states = model.predict(df[['RPM', 'Speed']])
    return hidden_states, model

# Perform HMM on the datasets
hidden_states_FF_as_Speed, model_FF_as_Speed = perform_hmm(df_injection_FF_as_Speed)
hidden_states_RPM, model_RPM = perform_hmm(df_injection_RPM)
hidden_states_no_injection, model_no_injection = perform_hmm(df_no_injection)

# Generate ground truth labels
# Assuming cluster 0 in no injection scenario represents "no attack"
# We will assign labels accordingly
df_no_injection['Label'] = 0  # No attack
df_injection_FF_as_Speed['Label'] = 1  # Attack
df_injection_RPM['Label'] = 1  # Attack

# Map the predicted hidden states to the labels
df_injection_FF_as_Speed['Predicted_Label'] = hidden_states_FF_as_Speed
df_injection_RPM['Predicted_Label'] = hidden_states_RPM
df_no_injection['Predicted_Label'] = hidden_states_no_injection

# Calculate accuracy
def calculate_accuracy(df):
    correct_predictions = (df['Label'] == df['Predicted_Label']).sum()
    accuracy = correct_predictions / len(df)
    return accuracy

accuracy_FF_as_Speed = calculate_accuracy(df_injection_FF_as_Speed)
accuracy_RPM = calculate_accuracy(df_injection_RPM)
accuracy_no_injection = calculate_accuracy(df_no_injection)

# Plot the clusters
plt.figure(figsize=(15, 10))

plt.subplot(2, 3, 1)
plt.scatter(df_injection_FF_as_Speed['RPM'], df_injection_FF_as_Speed['Speed'], c=hidden_states_FF_as_Speed, cmap='viridis')
plt.title('Injection of FF as Speed (RPM)')
plt.xlabel('RPM')
plt.ylabel('Speed')

plt.subplot(2, 3, 2)
plt.scatter(df_injection_FF_as_Speed['Speed'], df_injection_FF_as_Speed['RPM'], c=hidden_states_FF_as_Speed, cmap='viridis')
plt.title('Injection of FF as Speed (Speed)')
plt.xlabel('Speed')
plt.ylabel('RPM')

plt.subplot(2, 3, 3)
plt.scatter(df_injection_RPM['RPM'], df_injection_RPM['Speed'], c=hidden_states_RPM, cmap='viridis')
plt.title('Injection of RPM (RPM)')
plt.xlabel('RPM')
plt.ylabel('Speed')

plt.subplot(2, 3, 4)
plt.scatter(df_injection_RPM['Speed'], df_injection_RPM['RPM'], c=hidden_states_RPM, cmap='viridis')
plt.title('Injection of RPM (Speed)')
plt.xlabel('Speed')
plt.ylabel('RPM')

plt.subplot(2, 3, 5)
plt.scatter(df_no_injection['RPM'], df_no_injection['Speed'], c=hidden_states_no_injection, cmap='viridis')
plt.title('No Injection (RPM)')
plt.xlabel('RPM')
plt.ylabel('Speed')

plt.subplot(2, 3, 6)
plt.scatter(df_no_injection['Speed'], df_no_injection['RPM'], c=hidden_states_no_injection, cmap='viridis')
plt.title('No Injection (Speed)')
plt.xlabel('Speed')
plt.ylabel('RPM')

plt.tight_layout()
plt.show()

# Print results
print("Accuracy for Injection of FF as Speed (RPM):", accuracy_FF_as_Speed)
print("Accuracy for Injection of RPM (RPM):", accuracy_RPM)
print("Accuracy for No Injection (RPM):", accuracy_no_injection)